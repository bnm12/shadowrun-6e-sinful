import { computed } from "vue";
import Rand from "rand-seed";
import type { Ref } from "vue";

// A list of cool-sounding, thematically appropriate words for generating data links.
const shadowrunDataLinkWords = [
  "Matrix",
  "Echo",
  "Nexus",
  "Chrome",
  "Street",
  "Samurai",
  "Decker",
  "Rigger",
  "Adept",
  "Trace",
  "Protocol",
  "System",
  "Daemon",
  "ICE",
  "Grid",
  "Zone",
  "Vector",
  "Signal",
  "Ghost",
  "Cipher",
  "Node",
  "Access",
  "Core",
  "Data",
  "Stream",
  "Link",
  "Port",
  "Channel",
  "Relay",
  "Net",
  "Web",
  "Spider",
  "Dragon",
  "Shadow",
  "Runner",
  "SIN",
  "ID",
  "Corp",
  "MegaCorp",
  "Enforcement",
  "Security",
  "Firewall",
  "Payload",
  "Packet",
  "Subroutine",
  "BlackICE",
  "RedICE",
  "WhiteICE",
  "Credstick",
  "NuYen",
  "Chip",
  "SimSense",
  "BTL",
  "Cyberdeck",
  "Commlink",
  "Panther",
  "Cortex",
  "Interface",
  "Wetware",
  "Bioware",
  "Cyberware",
  "StreetCred",
  "Reputation",
  "Karma",
  "Edge",
  "Glitch",
  "CritGlitch",
  "Hot-Sim",
  "Cold-Sim",
  "Direct-Connect",
  "Wireless",
  "Jammer",
  "Spoof",
  "Mask",
  "Stealth",
  "Attack",
  "Sleaze",
  "DataSpike",
  "Biofeedback",
  "DumpShock",
  "CodeGate",
  "Sentry",
  "Patrol",
  "Guardian",
  "Observer",
  "Tracker",
  "Hound",
  "Cerberus",
  "Loki",
  "Odin",
  "Thor",
  "Anubis",
  "Horus",
  "Isis",
  "Osiris",
  "Zeus",
  "Hades",
  "Poseidon",
  "Ares",
  "Apollo",
  "Athena",
  "Hermes",
  "Prometheus",
  "Janus",
  "Proxy",
  "Mirage",
  "Doppelganger",
  "Wraith",
  "Spectre",
  "Phantom",
  "Revenant",
  "Banshee",
  "Poltergeist",
  "Ghoul",
  "Vampire",
  "Werewolf",
  "Wyrm",
  "Leviathan",
  "Behemoth",
  "Juggernaut",
  "Goliath",
  "Titan",
  "Olympus",
  "Asgard",
  "Valhalla",
  "Elysium",
  "Arcadia",
  "Avalon",
  "Camelot",
  "Excalibur",
  "Mjolnir",
  "Gungnir",
  "Aegis",
  "Gorgon",
  "Hydra",
  "Chimera",
  "Sphinx",
  "Manticore",
  "Basilisk",
  "Cockatrice",
  "Griffin",
  "Pegasus",
  "Unicorn",
  "Phoenix",
  "Salamander",
  "Undine",
  "Sylph",
  "Gnome",
  "Archon",
  "Angel",
  "Demon",
  "Devil",
  "Imp",
  "Succubus",
  "Incubus",
  "Oni",
  "Tengu",
  "Kappa",
  "Naga",
  "Rakshasa",
  "Djinn",
  "Efreet",
  "Genie",
  "Golem",
  "Gargoyle",
  "Homunculus",
  "Automaton",
  "Robot",
  "Android",
  "Cyborg",
  "AI",
  "VI",
  "Persona",
  "Avatar",
  "Icon",
  "Sprite",
  "Agent",
  "Pilot",
  "Drone",
  "Watcher",
  "Overseer",
  "Controller",
  "Master",
  "Slave",
  "Client",
  "Server",
  "Host",
  "Gateway",
  "Router",
  "Switch",
  "Bridge",
  "Hub",
  "Fire",
  "Water",
  "Air",
  "Earth",
  "Spirit",
  "Man",
  "Beast",
  "Chaos",
  "Order",
  "Law",
  "Freedom",
  "Light",
  "Dark",
  "Twilight",
  "Dawn",
  "Dusk",
  "Night",
  "Day",
  "Sun",
  "Moon",
  "Star",
  "Void",
  "Abyss",
  "Rift",
  "Vortex",
  "Maelstrom",
  "Singularity",
  "Blackhole",
  "Wormhole",
  "Stargate",
  "Jumpgate",
  "NexusPoint",
  "ZeroPoint",
  "Alpha",
  "Beta",
  "Gamma",
  "Delta",
  "Epsilon",
  "Zeta",
  "Eta",
  "Theta",
  "Iota",
  "Kappa",
  "Lambda",
  "Mu",
  "Nu",
  "Xi",
  "Omicron",
  "Pi",
  "Rho",
  "Sigma",
  "Tau",
  "Upsilon",
  "Phi",
  "Chi",
  "Psi",
  "Omega",
];

// Thematic grid types for each category
const gridTypeMap = {
  Civil: "CLUSTER",   // Government/civil systems use clusters
  Bank: "VAULT",      // Financial systems are vaults
  Personal: "NODE",   // Personal data stored in individual nodes
  Corporate: "ZONE",  // Corporate data in protected zones
  Security: "CORE",   // Security systems are core infrastructure
  Matrix: "GRID",     // Matrix access through grid systems
};

// Function to generate a single data link with geographic grid style
function generateDataLink(rand: Rand, gridType: string): string {
  // Generate grid coordinates
  const latPrefix = rand.next() < 0.5 ? "N" : "S";
  const lonPrefix = rand.next() < 0.5 ? "E" : "W";
  const lat = Math.floor(rand.next() * 90) + 1; // 1-90
  const lon = Math.floor(rand.next() * 180) + 1; // 1-180
  const depth = String.fromCharCode(65 + Math.floor(rand.next() * 26)); // A-Z
  const level = Math.floor(rand.next() * 9) + 1; // 1-9
  
  const gridCoords = `${latPrefix}${lat}.${lonPrefix}${lon}.${depth}${level}`;
  
  // Generate 2-3 thematic words for the path
  const numWords = 2 + Math.floor(rand.next() * 2); // 2 or 3 words
  const words = [];
  for (let i = 0; i < numWords; i++) {
    words.push(
      shadowrunDataLinkWords[
        Math.floor(rand.next() * shadowrunDataLinkWords.length)
      ]
    );
  }
  
  return `${gridType}[${gridCoords}]::${words.join(".")}`;
}

export function useVerifiedDataLinks(
  sinId: Ref<string>,
  seed: Ref<string | undefined>
) {
  const dataLinks = computed(() => {
    const combinedSeed = `${sinId.value}${seed.value ?? ""}`;
    const rand = new Rand(combinedSeed);
    
    return {
      Civil: generateDataLink(rand, gridTypeMap.Civil),
      Bank: generateDataLink(rand, gridTypeMap.Bank),
      Personal: generateDataLink(rand, gridTypeMap.Personal),
      Corporate: generateDataLink(rand, gridTypeMap.Corporate),
      Security: generateDataLink(rand, gridTypeMap.Security),
      Matrix: generateDataLink(rand, gridTypeMap.Matrix),
    };
  });

  return {
    dataLinks,
  };
}
