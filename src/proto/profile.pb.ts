// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: src/proto/profile.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";

//========================================//
//                 Types                  //
//========================================//

/**
 * Enum for gender options
 */
export type Gender =
  | "GENDER_UNSPECIFIED"
  | "GENDER_MALE"
  | "GENDER_FEMALE"
  | "GENDER_DIVERSE"
  | "GENDER_NA";

/**
 * Enum for SIN quality levels
 */
export type SinQuality =
  | "SIN_QUALITY_UNSPECIFIED"
  | "SIN_QUALITY_LEVEL_1"
  | "SIN_QUALITY_LEVEL_2"
  | "SIN_QUALITY_LEVEL_3"
  | "SIN_QUALITY_LEVEL_4"
  | "SIN_QUALITY_LEVEL_5"
  | "SIN_QUALITY_LEVEL_6";

/**
 * Basic profile information (Level 1)
 */
export interface ProfileBasic {
  name: string;
  gender: Gender;
  nationality: string;
  metatype: string;
  photo: string;
}

/**
 * Identity information (Level 2)
 */
export interface ProfileIdentity {
  address: string;
  city: string;
  country: string;
  birthdate: string;
}

/**
 * Physical characteristics (Level 3)
 */
export interface ProfilePhysical {
  height: number;
  weight: number;
  skin: string;
  hair: string;
  eyes: string;
  seed: number;
}

/**
 * Medical information (Level 4)
 */
export interface ProfileMedical {
  bloodType: string;
  eyeScan: string;
  seed: number;
}

/**
 * Employment information (Level 5)
 */
export interface ProfileEmployment {
  profession: string;
  employer: string;
  employerAddress: string;
  seed: number;
}

/**
 * Genetic information (Level 6)
 */
export interface ProfileGenetic {
  seed: number;
}

/**
 * Main profile data structure
 */
export interface ProfileData {
  /**
   * Top-level identifiers and metadata
   */
  sinId: string;
  active: boolean;
  sinQuality: SinQuality;
  licenses: Record<string, ProfileData.Licenses["value"] | undefined>;
  /**
   * Nested data structures for tabbed information
   */
  basic: ProfileBasic;
  identity?: ProfileIdentity | null | undefined;
  physical?: ProfilePhysical | null | undefined;
  medical?: ProfileMedical | null | undefined;
  employment?: ProfileEmployment | null | undefined;
  genetic?: ProfileGenetic | null | undefined;
}

export declare namespace ProfileData {
  interface Licenses {
    key: string;
    value: SinQuality;
  }
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const Gender = {
  GENDER_UNSPECIFIED: "GENDER_UNSPECIFIED",
  GENDER_MALE: "GENDER_MALE",
  GENDER_FEMALE: "GENDER_FEMALE",
  GENDER_DIVERSE: "GENDER_DIVERSE",
  GENDER_NA: "GENDER_NA",
  /**
   * @private
   */
  _fromInt: function (i: number): Gender {
    switch (i) {
      case 0: {
        return "GENDER_UNSPECIFIED";
      }
      case 1: {
        return "GENDER_MALE";
      }
      case 2: {
        return "GENDER_FEMALE";
      }
      case 3: {
        return "GENDER_DIVERSE";
      }
      case 4: {
        return "GENDER_NA";
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as Gender;
      }
    }
  },
  /**
   * @private
   */
  _toInt: function (i: Gender): number {
    switch (i) {
      case "GENDER_UNSPECIFIED": {
        return 0;
      }
      case "GENDER_MALE": {
        return 1;
      }
      case "GENDER_FEMALE": {
        return 2;
      }
      case "GENDER_DIVERSE": {
        return 3;
      }
      case "GENDER_NA": {
        return 4;
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as number;
      }
    }
  },
} as const;

export const SinQuality = {
  SIN_QUALITY_UNSPECIFIED: "SIN_QUALITY_UNSPECIFIED",
  SIN_QUALITY_LEVEL_1: "SIN_QUALITY_LEVEL_1",
  SIN_QUALITY_LEVEL_2: "SIN_QUALITY_LEVEL_2",
  SIN_QUALITY_LEVEL_3: "SIN_QUALITY_LEVEL_3",
  SIN_QUALITY_LEVEL_4: "SIN_QUALITY_LEVEL_4",
  SIN_QUALITY_LEVEL_5: "SIN_QUALITY_LEVEL_5",
  SIN_QUALITY_LEVEL_6: "SIN_QUALITY_LEVEL_6",
  /**
   * @private
   */
  _fromInt: function (i: number): SinQuality {
    switch (i) {
      case 0: {
        return "SIN_QUALITY_UNSPECIFIED";
      }
      case 1: {
        return "SIN_QUALITY_LEVEL_1";
      }
      case 2: {
        return "SIN_QUALITY_LEVEL_2";
      }
      case 3: {
        return "SIN_QUALITY_LEVEL_3";
      }
      case 4: {
        return "SIN_QUALITY_LEVEL_4";
      }
      case 5: {
        return "SIN_QUALITY_LEVEL_5";
      }
      case 6: {
        return "SIN_QUALITY_LEVEL_6";
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as SinQuality;
      }
    }
  },
  /**
   * @private
   */
  _toInt: function (i: SinQuality): number {
    switch (i) {
      case "SIN_QUALITY_UNSPECIFIED": {
        return 0;
      }
      case "SIN_QUALITY_LEVEL_1": {
        return 1;
      }
      case "SIN_QUALITY_LEVEL_2": {
        return 2;
      }
      case "SIN_QUALITY_LEVEL_3": {
        return 3;
      }
      case "SIN_QUALITY_LEVEL_4": {
        return 4;
      }
      case "SIN_QUALITY_LEVEL_5": {
        return 5;
      }
      case "SIN_QUALITY_LEVEL_6": {
        return 6;
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as number;
      }
    }
  },
} as const;

export const ProfileBasic = {
  /**
   * Serializes ProfileBasic to protobuf.
   */
  encode: function (msg: PartialDeep<ProfileBasic>): Uint8Array {
    return ProfileBasic._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ProfileBasic from protobuf.
   */
  decode: function (bytes: ByteSource): ProfileBasic {
    return ProfileBasic._readMessage(
      ProfileBasic.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ProfileBasic with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ProfileBasic>): ProfileBasic {
    return {
      name: "",
      gender: Gender._fromInt(0),
      nationality: "",
      metatype: "",
      photo: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ProfileBasic>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    if (msg.gender && Gender._toInt(msg.gender)) {
      writer.writeEnum(2, Gender._toInt(msg.gender));
    }
    if (msg.nationality) {
      writer.writeString(3, msg.nationality);
    }
    if (msg.metatype) {
      writer.writeString(4, msg.metatype);
    }
    if (msg.photo) {
      writer.writeString(5, msg.photo);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ProfileBasic,
    reader: protoscript.BinaryReader,
  ): ProfileBasic {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        case 2: {
          msg.gender = Gender._fromInt(reader.readEnum());
          break;
        }
        case 3: {
          msg.nationality = reader.readString();
          break;
        }
        case 4: {
          msg.metatype = reader.readString();
          break;
        }
        case 5: {
          msg.photo = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ProfileIdentity = {
  /**
   * Serializes ProfileIdentity to protobuf.
   */
  encode: function (msg: PartialDeep<ProfileIdentity>): Uint8Array {
    return ProfileIdentity._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ProfileIdentity from protobuf.
   */
  decode: function (bytes: ByteSource): ProfileIdentity {
    return ProfileIdentity._readMessage(
      ProfileIdentity.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ProfileIdentity with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ProfileIdentity>): ProfileIdentity {
    return {
      address: "",
      city: "",
      country: "",
      birthdate: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ProfileIdentity>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.address) {
      writer.writeString(1, msg.address);
    }
    if (msg.city) {
      writer.writeString(2, msg.city);
    }
    if (msg.country) {
      writer.writeString(3, msg.country);
    }
    if (msg.birthdate) {
      writer.writeString(4, msg.birthdate);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ProfileIdentity,
    reader: protoscript.BinaryReader,
  ): ProfileIdentity {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.address = reader.readString();
          break;
        }
        case 2: {
          msg.city = reader.readString();
          break;
        }
        case 3: {
          msg.country = reader.readString();
          break;
        }
        case 4: {
          msg.birthdate = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ProfilePhysical = {
  /**
   * Serializes ProfilePhysical to protobuf.
   */
  encode: function (msg: PartialDeep<ProfilePhysical>): Uint8Array {
    return ProfilePhysical._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ProfilePhysical from protobuf.
   */
  decode: function (bytes: ByteSource): ProfilePhysical {
    return ProfilePhysical._readMessage(
      ProfilePhysical.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ProfilePhysical with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ProfilePhysical>): ProfilePhysical {
    return {
      height: 0,
      weight: 0,
      skin: "",
      hair: "",
      eyes: "",
      seed: 0,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ProfilePhysical>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.height) {
      writer.writeInt32(1, msg.height);
    }
    if (msg.weight) {
      writer.writeInt32(2, msg.weight);
    }
    if (msg.skin) {
      writer.writeString(3, msg.skin);
    }
    if (msg.hair) {
      writer.writeString(4, msg.hair);
    }
    if (msg.eyes) {
      writer.writeString(5, msg.eyes);
    }
    if (msg.seed) {
      writer.writeInt32(6, msg.seed);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ProfilePhysical,
    reader: protoscript.BinaryReader,
  ): ProfilePhysical {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.height = reader.readInt32();
          break;
        }
        case 2: {
          msg.weight = reader.readInt32();
          break;
        }
        case 3: {
          msg.skin = reader.readString();
          break;
        }
        case 4: {
          msg.hair = reader.readString();
          break;
        }
        case 5: {
          msg.eyes = reader.readString();
          break;
        }
        case 6: {
          msg.seed = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ProfileMedical = {
  /**
   * Serializes ProfileMedical to protobuf.
   */
  encode: function (msg: PartialDeep<ProfileMedical>): Uint8Array {
    return ProfileMedical._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ProfileMedical from protobuf.
   */
  decode: function (bytes: ByteSource): ProfileMedical {
    return ProfileMedical._readMessage(
      ProfileMedical.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ProfileMedical with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ProfileMedical>): ProfileMedical {
    return {
      bloodType: "",
      eyeScan: "",
      seed: 0,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ProfileMedical>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.bloodType) {
      writer.writeString(1, msg.bloodType);
    }
    if (msg.eyeScan) {
      writer.writeString(2, msg.eyeScan);
    }
    if (msg.seed) {
      writer.writeInt32(3, msg.seed);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ProfileMedical,
    reader: protoscript.BinaryReader,
  ): ProfileMedical {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.bloodType = reader.readString();
          break;
        }
        case 2: {
          msg.eyeScan = reader.readString();
          break;
        }
        case 3: {
          msg.seed = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ProfileEmployment = {
  /**
   * Serializes ProfileEmployment to protobuf.
   */
  encode: function (msg: PartialDeep<ProfileEmployment>): Uint8Array {
    return ProfileEmployment._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ProfileEmployment from protobuf.
   */
  decode: function (bytes: ByteSource): ProfileEmployment {
    return ProfileEmployment._readMessage(
      ProfileEmployment.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ProfileEmployment with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ProfileEmployment>): ProfileEmployment {
    return {
      profession: "",
      employer: "",
      employerAddress: "",
      seed: 0,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ProfileEmployment>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.profession) {
      writer.writeString(1, msg.profession);
    }
    if (msg.employer) {
      writer.writeString(2, msg.employer);
    }
    if (msg.employerAddress) {
      writer.writeString(3, msg.employerAddress);
    }
    if (msg.seed) {
      writer.writeInt32(4, msg.seed);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ProfileEmployment,
    reader: protoscript.BinaryReader,
  ): ProfileEmployment {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.profession = reader.readString();
          break;
        }
        case 2: {
          msg.employer = reader.readString();
          break;
        }
        case 3: {
          msg.employerAddress = reader.readString();
          break;
        }
        case 4: {
          msg.seed = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ProfileGenetic = {
  /**
   * Serializes ProfileGenetic to protobuf.
   */
  encode: function (msg: PartialDeep<ProfileGenetic>): Uint8Array {
    return ProfileGenetic._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ProfileGenetic from protobuf.
   */
  decode: function (bytes: ByteSource): ProfileGenetic {
    return ProfileGenetic._readMessage(
      ProfileGenetic.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ProfileGenetic with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ProfileGenetic>): ProfileGenetic {
    return {
      seed: 0,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ProfileGenetic>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.seed) {
      writer.writeInt32(1, msg.seed);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ProfileGenetic,
    reader: protoscript.BinaryReader,
  ): ProfileGenetic {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.seed = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ProfileData = {
  /**
   * Serializes ProfileData to protobuf.
   */
  encode: function (msg: PartialDeep<ProfileData>): Uint8Array {
    return ProfileData._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ProfileData from protobuf.
   */
  decode: function (bytes: ByteSource): ProfileData {
    return ProfileData._readMessage(
      ProfileData.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ProfileData with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ProfileData>): ProfileData {
    return {
      sinId: "",
      active: false,
      sinQuality: SinQuality._fromInt(0),
      licenses: {},
      basic: ProfileBasic.initialize(),
      identity: undefined,
      physical: undefined,
      medical: undefined,
      employment: undefined,
      genetic: undefined,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ProfileData>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.sinId) {
      writer.writeString(1, msg.sinId);
    }
    if (msg.active) {
      writer.writeBool(2, msg.active);
    }
    if (msg.sinQuality && SinQuality._toInt(msg.sinQuality)) {
      writer.writeEnum(3, SinQuality._toInt(msg.sinQuality));
    }
    if (msg.licenses) {
      writer.writeRepeatedMessage(
        4,
        Object.entries(msg.licenses).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        ProfileData.Licenses._writeMessage,
      );
    }
    if (msg.basic) {
      writer.writeMessage(5, msg.basic, ProfileBasic._writeMessage);
    }
    if (msg.identity != undefined) {
      writer.writeMessage(6, msg.identity, ProfileIdentity._writeMessage);
    }
    if (msg.physical != undefined) {
      writer.writeMessage(7, msg.physical, ProfilePhysical._writeMessage);
    }
    if (msg.medical != undefined) {
      writer.writeMessage(8, msg.medical, ProfileMedical._writeMessage);
    }
    if (msg.employment != undefined) {
      writer.writeMessage(9, msg.employment, ProfileEmployment._writeMessage);
    }
    if (msg.genetic != undefined) {
      writer.writeMessage(10, msg.genetic, ProfileGenetic._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ProfileData,
    reader: protoscript.BinaryReader,
  ): ProfileData {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.sinId = reader.readString();
          break;
        }
        case 2: {
          msg.active = reader.readBool();
          break;
        }
        case 3: {
          msg.sinQuality = SinQuality._fromInt(reader.readEnum());
          break;
        }
        case 4: {
          const map = {} as ProfileData.Licenses;
          reader.readMessage(map, ProfileData.Licenses._readMessage);
          msg.licenses[map.key.toString()] = map.value;
          break;
        }
        case 5: {
          reader.readMessage(msg.basic, ProfileBasic._readMessage);
          break;
        }
        case 6: {
          msg.identity = ProfileIdentity.initialize();
          reader.readMessage(msg.identity, ProfileIdentity._readMessage);
          break;
        }
        case 7: {
          msg.physical = ProfilePhysical.initialize();
          reader.readMessage(msg.physical, ProfilePhysical._readMessage);
          break;
        }
        case 8: {
          msg.medical = ProfileMedical.initialize();
          reader.readMessage(msg.medical, ProfileMedical._readMessage);
          break;
        }
        case 9: {
          msg.employment = ProfileEmployment.initialize();
          reader.readMessage(msg.employment, ProfileEmployment._readMessage);
          break;
        }
        case 10: {
          msg.genetic = ProfileGenetic.initialize();
          reader.readMessage(msg.genetic, ProfileGenetic._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  Licenses: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<ProfileData.Licenses>,
      writer: protoscript.BinaryWriter,
    ): protoscript.BinaryWriter {
      if (msg.key) {
        writer.writeString(1, msg.key);
      }
      if (msg.value && SinQuality._toInt(msg.value)) {
        writer.writeEnum(2, SinQuality._toInt(msg.value));
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: ProfileData.Licenses,
      reader: protoscript.BinaryReader,
    ): ProfileData.Licenses {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readString();
            break;
          }
          case 2: {
            msg.value = SinQuality._fromInt(reader.readEnum());
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const GenderJSON = {
  GENDER_UNSPECIFIED: "GENDER_UNSPECIFIED",
  GENDER_MALE: "GENDER_MALE",
  GENDER_FEMALE: "GENDER_FEMALE",
  GENDER_DIVERSE: "GENDER_DIVERSE",
  GENDER_NA: "GENDER_NA",
  /**
   * @private
   */
  _fromInt: function (i: number): Gender {
    switch (i) {
      case 0: {
        return "GENDER_UNSPECIFIED";
      }
      case 1: {
        return "GENDER_MALE";
      }
      case 2: {
        return "GENDER_FEMALE";
      }
      case 3: {
        return "GENDER_DIVERSE";
      }
      case 4: {
        return "GENDER_NA";
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as Gender;
      }
    }
  },
  /**
   * @private
   */
  _toInt: function (i: Gender): number {
    switch (i) {
      case "GENDER_UNSPECIFIED": {
        return 0;
      }
      case "GENDER_MALE": {
        return 1;
      }
      case "GENDER_FEMALE": {
        return 2;
      }
      case "GENDER_DIVERSE": {
        return 3;
      }
      case "GENDER_NA": {
        return 4;
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as number;
      }
    }
  },
} as const;

export const SinQualityJSON = {
  SIN_QUALITY_UNSPECIFIED: "SIN_QUALITY_UNSPECIFIED",
  SIN_QUALITY_LEVEL_1: "SIN_QUALITY_LEVEL_1",
  SIN_QUALITY_LEVEL_2: "SIN_QUALITY_LEVEL_2",
  SIN_QUALITY_LEVEL_3: "SIN_QUALITY_LEVEL_3",
  SIN_QUALITY_LEVEL_4: "SIN_QUALITY_LEVEL_4",
  SIN_QUALITY_LEVEL_5: "SIN_QUALITY_LEVEL_5",
  SIN_QUALITY_LEVEL_6: "SIN_QUALITY_LEVEL_6",
  /**
   * @private
   */
  _fromInt: function (i: number): SinQuality {
    switch (i) {
      case 0: {
        return "SIN_QUALITY_UNSPECIFIED";
      }
      case 1: {
        return "SIN_QUALITY_LEVEL_1";
      }
      case 2: {
        return "SIN_QUALITY_LEVEL_2";
      }
      case 3: {
        return "SIN_QUALITY_LEVEL_3";
      }
      case 4: {
        return "SIN_QUALITY_LEVEL_4";
      }
      case 5: {
        return "SIN_QUALITY_LEVEL_5";
      }
      case 6: {
        return "SIN_QUALITY_LEVEL_6";
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as SinQuality;
      }
    }
  },
  /**
   * @private
   */
  _toInt: function (i: SinQuality): number {
    switch (i) {
      case "SIN_QUALITY_UNSPECIFIED": {
        return 0;
      }
      case "SIN_QUALITY_LEVEL_1": {
        return 1;
      }
      case "SIN_QUALITY_LEVEL_2": {
        return 2;
      }
      case "SIN_QUALITY_LEVEL_3": {
        return 3;
      }
      case "SIN_QUALITY_LEVEL_4": {
        return 4;
      }
      case "SIN_QUALITY_LEVEL_5": {
        return 5;
      }
      case "SIN_QUALITY_LEVEL_6": {
        return 6;
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as number;
      }
    }
  },
} as const;

export const ProfileBasicJSON = {
  /**
   * Serializes ProfileBasic to JSON.
   */
  encode: function (msg: PartialDeep<ProfileBasic>): string {
    return JSON.stringify(ProfileBasicJSON._writeMessage(msg));
  },

  /**
   * Deserializes ProfileBasic from JSON.
   */
  decode: function (json: string): ProfileBasic {
    return ProfileBasicJSON._readMessage(
      ProfileBasicJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ProfileBasic with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ProfileBasic>): ProfileBasic {
    return {
      name: "",
      gender: Gender._fromInt(0),
      nationality: "",
      metatype: "",
      photo: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ProfileBasic>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.name) {
      json["name"] = msg.name;
    }
    if (msg.gender && GenderJSON._toInt(msg.gender)) {
      json["gender"] = msg.gender;
    }
    if (msg.nationality) {
      json["nationality"] = msg.nationality;
    }
    if (msg.metatype) {
      json["metatype"] = msg.metatype;
    }
    if (msg.photo) {
      json["photo"] = msg.photo;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: ProfileBasic, json: any): ProfileBasic {
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    const _gender_ = json["gender"];
    if (_gender_) {
      msg.gender = Gender._fromInt(_gender_);
    }
    const _nationality_ = json["nationality"];
    if (_nationality_) {
      msg.nationality = _nationality_;
    }
    const _metatype_ = json["metatype"];
    if (_metatype_) {
      msg.metatype = _metatype_;
    }
    const _photo_ = json["photo"];
    if (_photo_) {
      msg.photo = _photo_;
    }
    return msg;
  },
};

export const ProfileIdentityJSON = {
  /**
   * Serializes ProfileIdentity to JSON.
   */
  encode: function (msg: PartialDeep<ProfileIdentity>): string {
    return JSON.stringify(ProfileIdentityJSON._writeMessage(msg));
  },

  /**
   * Deserializes ProfileIdentity from JSON.
   */
  decode: function (json: string): ProfileIdentity {
    return ProfileIdentityJSON._readMessage(
      ProfileIdentityJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ProfileIdentity with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ProfileIdentity>): ProfileIdentity {
    return {
      address: "",
      city: "",
      country: "",
      birthdate: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ProfileIdentity>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.address) {
      json["address"] = msg.address;
    }
    if (msg.city) {
      json["city"] = msg.city;
    }
    if (msg.country) {
      json["country"] = msg.country;
    }
    if (msg.birthdate) {
      json["birthdate"] = msg.birthdate;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: ProfileIdentity, json: any): ProfileIdentity {
    const _address_ = json["address"];
    if (_address_) {
      msg.address = _address_;
    }
    const _city_ = json["city"];
    if (_city_) {
      msg.city = _city_;
    }
    const _country_ = json["country"];
    if (_country_) {
      msg.country = _country_;
    }
    const _birthdate_ = json["birthdate"];
    if (_birthdate_) {
      msg.birthdate = _birthdate_;
    }
    return msg;
  },
};

export const ProfilePhysicalJSON = {
  /**
   * Serializes ProfilePhysical to JSON.
   */
  encode: function (msg: PartialDeep<ProfilePhysical>): string {
    return JSON.stringify(ProfilePhysicalJSON._writeMessage(msg));
  },

  /**
   * Deserializes ProfilePhysical from JSON.
   */
  decode: function (json: string): ProfilePhysical {
    return ProfilePhysicalJSON._readMessage(
      ProfilePhysicalJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ProfilePhysical with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ProfilePhysical>): ProfilePhysical {
    return {
      height: 0,
      weight: 0,
      skin: "",
      hair: "",
      eyes: "",
      seed: 0,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ProfilePhysical>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.height) {
      json["height"] = msg.height;
    }
    if (msg.weight) {
      json["weight"] = msg.weight;
    }
    if (msg.skin) {
      json["skin"] = msg.skin;
    }
    if (msg.hair) {
      json["hair"] = msg.hair;
    }
    if (msg.eyes) {
      json["eyes"] = msg.eyes;
    }
    if (msg.seed) {
      json["seed"] = msg.seed;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: ProfilePhysical, json: any): ProfilePhysical {
    const _height_ = json["height"];
    if (_height_) {
      msg.height = protoscript.parseNumber(_height_);
    }
    const _weight_ = json["weight"];
    if (_weight_) {
      msg.weight = protoscript.parseNumber(_weight_);
    }
    const _skin_ = json["skin"];
    if (_skin_) {
      msg.skin = _skin_;
    }
    const _hair_ = json["hair"];
    if (_hair_) {
      msg.hair = _hair_;
    }
    const _eyes_ = json["eyes"];
    if (_eyes_) {
      msg.eyes = _eyes_;
    }
    const _seed_ = json["seed"];
    if (_seed_) {
      msg.seed = protoscript.parseNumber(_seed_);
    }
    return msg;
  },
};

export const ProfileMedicalJSON = {
  /**
   * Serializes ProfileMedical to JSON.
   */
  encode: function (msg: PartialDeep<ProfileMedical>): string {
    return JSON.stringify(ProfileMedicalJSON._writeMessage(msg));
  },

  /**
   * Deserializes ProfileMedical from JSON.
   */
  decode: function (json: string): ProfileMedical {
    return ProfileMedicalJSON._readMessage(
      ProfileMedicalJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ProfileMedical with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ProfileMedical>): ProfileMedical {
    return {
      bloodType: "",
      eyeScan: "",
      seed: 0,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ProfileMedical>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.bloodType) {
      json["bloodType"] = msg.bloodType;
    }
    if (msg.eyeScan) {
      json["eyeScan"] = msg.eyeScan;
    }
    if (msg.seed) {
      json["seed"] = msg.seed;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: ProfileMedical, json: any): ProfileMedical {
    const _bloodType_ = json["bloodType"] ?? json["blood_type"];
    if (_bloodType_) {
      msg.bloodType = _bloodType_;
    }
    const _eyeScan_ = json["eyeScan"] ?? json["eye_scan"];
    if (_eyeScan_) {
      msg.eyeScan = _eyeScan_;
    }
    const _seed_ = json["seed"];
    if (_seed_) {
      msg.seed = protoscript.parseNumber(_seed_);
    }
    return msg;
  },
};

export const ProfileEmploymentJSON = {
  /**
   * Serializes ProfileEmployment to JSON.
   */
  encode: function (msg: PartialDeep<ProfileEmployment>): string {
    return JSON.stringify(ProfileEmploymentJSON._writeMessage(msg));
  },

  /**
   * Deserializes ProfileEmployment from JSON.
   */
  decode: function (json: string): ProfileEmployment {
    return ProfileEmploymentJSON._readMessage(
      ProfileEmploymentJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ProfileEmployment with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ProfileEmployment>): ProfileEmployment {
    return {
      profession: "",
      employer: "",
      employerAddress: "",
      seed: 0,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ProfileEmployment>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.profession) {
      json["profession"] = msg.profession;
    }
    if (msg.employer) {
      json["employer"] = msg.employer;
    }
    if (msg.employerAddress) {
      json["employerAddress"] = msg.employerAddress;
    }
    if (msg.seed) {
      json["seed"] = msg.seed;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ProfileEmployment,
    json: any,
  ): ProfileEmployment {
    const _profession_ = json["profession"];
    if (_profession_) {
      msg.profession = _profession_;
    }
    const _employer_ = json["employer"];
    if (_employer_) {
      msg.employer = _employer_;
    }
    const _employerAddress_ =
      json["employerAddress"] ?? json["employer_address"];
    if (_employerAddress_) {
      msg.employerAddress = _employerAddress_;
    }
    const _seed_ = json["seed"];
    if (_seed_) {
      msg.seed = protoscript.parseNumber(_seed_);
    }
    return msg;
  },
};

export const ProfileGeneticJSON = {
  /**
   * Serializes ProfileGenetic to JSON.
   */
  encode: function (msg: PartialDeep<ProfileGenetic>): string {
    return JSON.stringify(ProfileGeneticJSON._writeMessage(msg));
  },

  /**
   * Deserializes ProfileGenetic from JSON.
   */
  decode: function (json: string): ProfileGenetic {
    return ProfileGeneticJSON._readMessage(
      ProfileGeneticJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ProfileGenetic with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ProfileGenetic>): ProfileGenetic {
    return {
      seed: 0,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ProfileGenetic>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.seed) {
      json["seed"] = msg.seed;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: ProfileGenetic, json: any): ProfileGenetic {
    const _seed_ = json["seed"];
    if (_seed_) {
      msg.seed = protoscript.parseNumber(_seed_);
    }
    return msg;
  },
};

export const ProfileDataJSON = {
  /**
   * Serializes ProfileData to JSON.
   */
  encode: function (msg: PartialDeep<ProfileData>): string {
    return JSON.stringify(ProfileDataJSON._writeMessage(msg));
  },

  /**
   * Deserializes ProfileData from JSON.
   */
  decode: function (json: string): ProfileData {
    return ProfileDataJSON._readMessage(
      ProfileDataJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ProfileData with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ProfileData>): ProfileData {
    return {
      sinId: "",
      active: false,
      sinQuality: SinQuality._fromInt(0),
      licenses: {},
      basic: ProfileBasicJSON.initialize(),
      identity: undefined,
      physical: undefined,
      medical: undefined,
      employment: undefined,
      genetic: undefined,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ProfileData>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.sinId) {
      json["sinId"] = msg.sinId;
    }
    if (msg.active) {
      json["active"] = msg.active;
    }
    if (msg.sinQuality && SinQualityJSON._toInt(msg.sinQuality)) {
      json["sinQuality"] = msg.sinQuality;
    }
    if (msg.licenses) {
      const _licenses_ = Object.fromEntries(
        Object.entries(msg.licenses)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(ProfileDataJSON.Licenses._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_licenses_).length > 0) {
        json["licenses"] = _licenses_;
      }
    }
    if (msg.basic) {
      const _basic_ = ProfileBasicJSON._writeMessage(msg.basic);
      if (Object.keys(_basic_).length > 0) {
        json["basic"] = _basic_;
      }
    }
    if (msg.identity != undefined) {
      const _identity_ = ProfileIdentityJSON._writeMessage(msg.identity);
      json["identity"] = _identity_;
    }
    if (msg.physical != undefined) {
      const _physical_ = ProfilePhysicalJSON._writeMessage(msg.physical);
      json["physical"] = _physical_;
    }
    if (msg.medical != undefined) {
      const _medical_ = ProfileMedicalJSON._writeMessage(msg.medical);
      json["medical"] = _medical_;
    }
    if (msg.employment != undefined) {
      const _employment_ = ProfileEmploymentJSON._writeMessage(msg.employment);
      json["employment"] = _employment_;
    }
    if (msg.genetic != undefined) {
      const _genetic_ = ProfileGeneticJSON._writeMessage(msg.genetic);
      json["genetic"] = _genetic_;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: ProfileData, json: any): ProfileData {
    const _sinId_ = json["sinId"] ?? json["sin_id"];
    if (_sinId_) {
      msg.sinId = _sinId_;
    }
    const _active_ = json["active"];
    if (_active_) {
      msg.active = _active_;
    }
    const _sinQuality_ = json["sinQuality"] ?? json["sin_quality"];
    if (_sinQuality_) {
      msg.sinQuality = SinQuality._fromInt(_sinQuality_);
    }
    const _licenses_ = json["licenses"];
    if (_licenses_) {
      msg.licenses = Object.fromEntries(
        Object.entries(_licenses_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(ProfileDataJSON.Licenses._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _basic_ = json["basic"];
    if (_basic_) {
      ProfileBasicJSON._readMessage(msg.basic, _basic_);
    }
    const _identity_ = json["identity"];
    if (_identity_) {
      msg.identity = ProfileIdentityJSON.initialize();
      ProfileIdentityJSON._readMessage(msg.identity, _identity_);
    }
    const _physical_ = json["physical"];
    if (_physical_) {
      msg.physical = ProfilePhysicalJSON.initialize();
      ProfilePhysicalJSON._readMessage(msg.physical, _physical_);
    }
    const _medical_ = json["medical"];
    if (_medical_) {
      msg.medical = ProfileMedicalJSON.initialize();
      ProfileMedicalJSON._readMessage(msg.medical, _medical_);
    }
    const _employment_ = json["employment"];
    if (_employment_) {
      msg.employment = ProfileEmploymentJSON.initialize();
      ProfileEmploymentJSON._readMessage(msg.employment, _employment_);
    }
    const _genetic_ = json["genetic"];
    if (_genetic_) {
      msg.genetic = ProfileGeneticJSON.initialize();
      ProfileGeneticJSON._readMessage(msg.genetic, _genetic_);
    }
    return msg;
  },

  Licenses: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<ProfileData.Licenses>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value && SinQualityJSON._toInt(msg.value)) {
        json["value"] = msg.value;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: ProfileData.Licenses,
      json: any,
    ): ProfileData.Licenses {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = _key_;
      }
      const _value_ = json["value"];
      if (_value_) {
        msg.value = SinQuality._fromInt(_value_);
      }
      return msg;
    },
  },
};
